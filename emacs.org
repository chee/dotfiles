#+TITLE: emacs.org

* emacs.org
** What is this?
This is my emacs configuration in org-mode using org-babel. It's loaded using =(org-babel-load-file "~/dotfiles/emacs.org")= from my =init.el=. It contains a lot of things inspired (stolen) from places around the on web such as [[http://pages.sachachua.com/.emacs.d/Sacha.html][this one]]. 
** How to Add/Modify 
To add a code block, type =<s= and press =tab=, this adds a code block. Type =emacs-lisp= after =#BEGIN_SRC= to ensure the correct language.
To modify a code block, press =C-c '= to open an emacs-lisp buffer and hack away. Use =eval-buffer= to test the changes, and press =C-c '= again to add the changes to the org file.
** Some good keys to remember
| Key   | Action                                                     |
|-------+------------------------------------------------------------|
| F8    | Open/close neo-tree.                                       |
| C-c ' | Edit code within org-mode code blocks in their native mode |
| C-x u | Open undo-tree                                             |
| C-c h | Open helm-mini to navigate buffers                         |

** Package Setup
Setup the package repositories and startup use-package.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  ;(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  ;(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))
  (package-initialize)

  (require 'use-package)
#+END_SRC

* TODO Things to do 
An on-going list of things I want to change

- [X] move this file to ~/dotfiles/emacs.org
- [ ]fix evil escape keys
- [-] Clean up org-mode stuff [2/3]
  + [X] use use-package
  + [ ] make the bullets prettier
  + [X] make the headers bigger
- [ ] magit: [0/2]
  + [ ] learn to use
  + [ ] configure
- yasnippet: [0/2]
  + [ ] learn to use
  + [ ] configure
- [ ] Configure C#
- [ ] add and consolidate more custom keys

* Emacs
** evil mode
Because I like like my modal editing. 
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC

*** TODO fix up the esc keys
#+BEGIN_SRC emacs-lisp
  ;;; esc quits
  ;(define-key evil-normal-state-map [escape] 'keyboard-quit)
  ;(define-key evil-visual-state-map [escape] 'keyboard-quit)
  ;(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  ;(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  ;(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  ;(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  ;(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  ;;;;;;;;;;;;;;;;;
#+END_SRC

** org mode
This stuff is mostly for making org-mode prettier:
- =org-src-fontify-natively= turns on syntax highlighting for =#+SRC= blocks
- =org-bullets= provides prettier bullets for the header
- =indent-mode= indents each header and text block
- =turn-on-visual-line-mode= is for visual word wrap

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-bullets
    :config
    (setq org-src-fontify-natively t)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode 1)))
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
     '(org-level-2 ((t (:inherit outline-1 :height 1.2))))
     '(org-level-3 ((t (:inherit outline-1 :height 1.1))))
     '(org-level-4 ((t (:inherit outline-1 :height 1.0))))
     '(org-level-5 ((t (:inherit outline-1 :height 1.0))))))

  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([-*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

  (setq org-hide-emphasis-markers t)
#+END_SRC

I wasn't able to get this to work, but it's supposed to use syntax highlighting for =#+SRC= blocks in html exports
#+BEGIN_SRC emacs-lisp
  ;(use-package htmlize
  ;   :ensure t)
  ;(setq org-src-fontify-natively t)
#+END_SRC

** TODO yasnippet
I should probably use this at some point.
#+BEGIN_SRC emacs-lisp
  ;(use-package yasnippet
  ;  :ensure t
  ;  :init
  ;  (setq yas-snippet-dirs
  ;       '("~/.emacs.d/snippets"))
  ;  :config
  ;  (yas-global-mode 1))
#+END_SRC

** autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default))
#+END_SRC

** neotree
Emacs version of NERDTree, press <f8> to open.
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :init
    (setq neo-theme 'ascii)
    :config
    (global-set-key [f8] 'neotree-toggle)
    (add-hook 'neotree-mode-hook
              (lambda ()
                (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "q") 'neotree-enter))))


#+END_SRC

** slime
Using this to mess with stumpwm right now.
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :init
    (setq inferior-list-program "sbcl"))
#+END_SRC

** undo-tree
press <C-x u> to use and <q> to quit.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer t
    :ensure t
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC

** magit
I should probably learn how to use this.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+END_SRC

Get evil-mode to play nicely
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :ensure t)

#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp 
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init
    (require 'helm-config)
    (helm-mode 1)
    (helm-autoresize-mode 1)
    (setq helm-autoresize-max-height 40)
    :bind
    ("C-c h" . helm-mini)
    ("C-c a" . helm-apropos)
    ("M-x" . helm-M-x)
    ("C-x f" . helm-find-files))
#+END_SRC

** custom keys
Buffer movement
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  'buf-move-right)
#+END_SRC

** random things
Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Frames only mode to use my WM
#+BEGIN_SRC emacs-lisp
  (use-package frames-only-mode
    :ensure t
    :init
    (frames-only-mode))
#+END_SRC

** rainbow delimiters
Add rainbow delimiters in all programming language modes
#+BEGIN_SRC emacs-lisp 
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Languages
** Python
Jedi is used for autocompletion.
#+BEGIN_SRC emacs-lisp
  ;; (use-package jedi
  ;;   :ensure t
  ;;   :init
  ;;   (setq jedi:complete-on-dot t)
  ;;   :config
  ;;   (add-hook 'python-mode-hook 'jedi:setup))
    ;;(setq jedi:tooltip-show t)
    ;;(setq jedi:tooltip-method '(popup)))
#+END_SRC

Autopep8 automatically formats python code to pep8 standards. 
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t)
#+END_SRC

Elpy provides an ide-like environment for python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (elpy-enable)
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
    (add-hook 'elpy-mode-hook 'flycheck-mode))
#+END_SRC

** C#
#+BEGIN_SRC emacs-lisp
  ;; (use-package csharp-mode
  ;;   :ensure t
  ;;   :init
  ;;   ;(autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
  ;;   (setq auto-mode-alist
  ;;      (append '(("\\.cs$" . csharp-mode)) auto-mode-alist)))
#+END_SRC
Omnisharp should load after a csharp file is loaded
#+BEGIN_SRC emacs-lisp
  ;; (use-package omnisharp
  ;;   :ensure t
  ;;   :init
  ;;   (setq omnisharp-server-executable-path "~/omnisharp-server/OmniSharp/bin/Debug/OmniSharp.exe")
  ;;   :config
  ;;  (add-hook 'csharp-mode-hook 'omnisharp-mode))
#+END_SRC
omnisharp evil-mode keys...
taken from: https://github.com/OmniSharp/omnisharp-emacs/blob/master/example-config-for-evil-mode.el
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'insert omnisharp-mode-map (kbd "M-.") 'omnisharp-auto-complete)
  (evil-define-key 'normal omnisharp-mode-map (kbd "<f12>") 'omnisharp-go-to-definition)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g u") 'omnisharp-find-usages)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g I") 'omnisharp-find-implementations) ; g i is taken
  (evil-define-key 'normal omnisharp-mode-map (kbd "g o") 'omnisharp-go-to-definition)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g r") 'omnisharp-run-code-action-refactoring)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g f") 'omnisharp-fix-code-issue-at-point)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g F") 'omnisharp-fix-usings)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g R") 'omnisharp-rename)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", i") 'omnisharp-current-type-information)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", I") 'omnisharp-current-type-documentation)
  (evil-define-key 'insert omnisharp-mode-map (kbd ".") 'omnisharp-add-dot-and-auto-complete)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n t") 'omnisharp-navigate-to-current-file-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n s") 'omnisharp-navigate-to-solution-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n f") 'omnisharp-navigate-to-solution-file-then-file-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n F") 'omnisharp-navigate-to-solution-file)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n r") 'omnisharp-navigate-to-region)
  (evil-define-key 'normal omnisharp-mode-map (kbd "<f12>") 'omnisharp-show-last-auto-complete-result)
  (evil-define-key 'insert omnisharp-mode-map (kbd "<f12>") 'omnisharp-show-last-auto-complete-result)
  (evil-define-key 'normal omnisharp-mode-map (kbd ",.") 'omnisharp-show-overloads-at-point)
  (evil-define-key 'normal omnisharp-mode-map (kbd ",rl") 'recompile)

  (evil-define-key 'normal omnisharp-mode-map (kbd ",rt")
    (lambda() (interactive) (omnisharp-unit-test "single")))

  (evil-define-key 'normal omnisharp-mode-map
    (kbd ",rf")
    (lambda() (interactive) (omnisharp-unit-test "fixture")))

  (evil-define-key 'normal omnisharp-mode-map
    (kbd ",ra")
    (lambda() (interactive) (omnisharp-unit-test "all")))

  ;; Speed up auto-complete on mono drastically. This comes with the
  ;; downside that documentation is impossible to fetch.
  (setq omnisharp-auto-complete-want-documentation nil)
#+END_SRC

** C
**** TODO set this up using use-package
Example taken from [[https://www.emacswiki.org/emacs/IndentingC][EmacsWIki: Indenting C]]
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)
#+END_SRC
** Lisp
- =show-paren-mode= highlights matching parentheses 
- =rainbow-delimiters= is a minor mode with highlights parentheses, brackets, and braces according to their depth.
- =paredit= inserts matching parentheses, among other things..
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)

  (use-package paredit
    :ensure t
    :init
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
    (add-hook 'lisp-mode-hook 'paredit-mode))
#+END_SRC
** Haskell
For xmonad and beyond
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :init
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))
#+END_SRC
** Javascript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :init
    (add-to-list `auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list `auto-mode-alist '("\\.json\\'" . js2-mode))
    (add-hook 'js2-mode-hook
              (lambda ()
                (setq-default js2-basic-offset 2))))
#+END_SRC
** Web Mode
Set up web mode for html, css, and js files
#+BEGIN_SRC emacs-lisp
  (use-package web-mode 
    :ensure t
    :init
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (add-hook 'web-mode-before-auto-complete-hooks
              '(lambda ()
                 (let ((web-mode-cur-language
                        (web-mode-language-at-pos))))))
    (add-to-list `auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list `auto-mode-alist '("\\.css\\'" . web-mode))
    ;;(add-to-list `auto-mode-alist '("\\.js\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda ()
                ; set the html indent to 2
                (setq web-mode-markup-indent-offset 2)
                (setq evil-shift-width 2)
                ; highlight matching elements in html
                (setq web-mode-enable-current-element-highlight 1)))
    )
#+END_SRC

* Custom Keys
** Programming Mode Keys
These keys apply to all programming modes

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda ()
              (define-key prog-mode-map "\C-ck" 'comment-region)
              (define-key prog-mode-map "\C-cu" 'uncomment-region)))
#+END_SRC
* Look and Feel 
** Menu Bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -99)
#+END_SRC

** Theme
Theme I'm currently using
#+BEGIN_SRC emacs-lisp
  (load-theme 'base16-tomorrow-night)
#+END_SRC

Some dark themes I Like
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'spacemacs-dark)
  ;;(load-theme 'base16-tomorrow-dark)
  ;;(load-theme 'base16-twilight-dark)
  ;;(load-theme 'base16-default-dark)
  ;;(load-theme 'solarized-dark)
  ;;(setq solarized-distinct-fringe-background t)
  ;;(load-theme 'base16-ocean-dark)
  ;;(load-theme 'material)
  ;;(load-theme 'spacegray)
  ;;(load-theme 'dracula)

  ;;(load-theme 'reykjavik)
  ;;(set-cursor-color "gainsboro")
#+END_SRC

Some light themes I like
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'spacemacs-light)
  ;;(load-theme 'light-soap)
  ;;(load-theme 'solarized-light)
#+END_SRC
** Font
Font I'm currently using
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Monaco-8" ))
#+END_SRC

Other fonts I like
=GohuFont= does not seem to play well with =org-bullets= sadly...
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'default-frame-alist '(font . "Input Mono Narrow-11" ))
  ;;(add-to-list 'default-frame-alist '(font . "Hermit-10" ))
  ;;(add-to-list 'default-frame-alist '(font . "Monaco-10" ))
  ;;(add-to-list 'default-frame-alist '(font . "Fantasque Sans Mono-11" ))
  ;;(add-to-list 'default-frame-alist '(font . "GohuFont-14" ))
  ;;(add-to-list 'default-frame-alist '(font . "envypn-11" ))
#+END_SRC
** Other stuff
Hide the gui and use a non-blinking cursor for a more zen-like experience.
Use C-mouse3 to open the menu-bar as a popup menu
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -99)
  (tool-bar-mode -1) ;; hide the toolbar
  (scroll-bar-mode -1) ;; hide the scrollbar 
  (blink-cursor-mode 0) ;; dont blink the cursor
  (set-fringe-mode '(0 . 0)) ;; remove the extra border around frames
#+END_SRC

Add line numbers whenever the major mode is a programming language
#+BEGIN_SRC emacs-lisp 
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

Add a space between the line numbers and the text
From https://www.emacswiki.org/emacs/LineNumbers
#+BEGIN_SRC emacs-lisp
  ;; (setq linum-format "%4d \u2502")
  ;; (setq linum-format "%d ")

  (add-hook 'linum-before-numbering-hook
            (lambda ()
              (setq-local linum-format-fmt
                          (let ((w (length (number-to-string
                                            (count-lines (point-min) (point-max))))))
                            (concat "%" (number-to-string w) "d")))))

  (defun linum-format-func (line)
    (concat
     (propertize (format linum-format-fmt line) 'face 'linum)
     (propertize " " 'face 'mode-line)))

  (setq linum-format 'linum-format-func)
#+END_SRC
** Modeline
Add an animated nyan-cat to indicate the buffer position, because why not?
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :ensure t
    ;:init
    ;(setq nyan-wavy-trail f)
    :config
    (nyan-mode 1)
    (nyan-start-animation))
#+END_SRC

Unused spacemacs modeline settings
#+BEGIN_SRC emacs-lisp
  ;(require 'spaceline-config)
  ;(spaceline-spacemacs-theme)
  ;(setq powerline-default-separator 'wave)
#+END_SRC

My custom modeline
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
                (list
       "-- " 
       ;; the buffer name; the file name as a tool tip
       '(:eval (propertize "%b " 'face 'font-lock-keyword-face
                          'help-echo (buffer-file-name)))

      ;; the current major mode for the buffer.
       "["

       '(:eval (propertize "%m" 'face 'font-lock-string-face
                           'help-echo buffer-file-coding-system))
       " -"
       minor-mode-alist ;; the minor modes for the current buffer
       "] "

       "[" ;; insert vs overwrite mode, input-method in a tooltip
       '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
              'face 'font-lock-preprocessor-face
              'help-echo (concat "Buffer is in "
                              (if overwrite-mode "overwrite" "insert") " mode")))

       ;; was this buffer modified since the last save? 
       '(:eval (when (buffer-modified-p)
              (concat ","  (propertize "Mod"
              'face 'font-lock-warning-face
                                'help-echo "Buffer has been modified"))))

       ;; is this buffer read-only?
       '(:eval (when buffer-read-only
                 (concat ","  (propertize "RO"
                                'face 'font-lock-type-face
                                'help-echo "Buffer is read-only"))))  
       "] "
      
       ;; line and column
       "(" ;; '%02' to set to 2 chars at least; prevents flickering
         (propertize "%02l" 'face 'font-lock-type-face) ","
         (propertize "%02c" 'face 'font-lock-type-face) 
       ") "

       '(:eval (list (nyan-create)))
      
       ;; relative position, size of file
       "["
       (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
       ;;"/"
       ;;(propertize "%I" 'face 'font-lock-constant-face) ;; size
       "] "

       " %-" ;; fill with '-'
       ))
#+END_SRC

***** TODO make the color of the bar change when switching between evil modes
#+BEGIN_SRC emacs-lisp
  ;; change mode-line color by evil state
  ;;(lexical-let ((default-color (cons (face-background 'mode-line)
  ;;                                  (face-foreground 'mode-line))))
  ;;    (add-hook 'post-command-hook
  ;;    (lambda ()
  ;;      (let ((color (cond ((minibufferp) default-color)
  ;;                      ((evil-insert-state-p) '("#eee" . "#ffffff"))
  ;;                      ((evil-emacs-state-p)  '("#444488" . "#ffffff"))
  ;;                      ((buffer-modified-p)   '("#006fa0" . "#ffffff"))
  ;;                      (t default-color))))
  ;;      (set-face-background 'mode-line (car color))
  ;;      (set-face-foreground 'mode-line (cdr color))))))
#+END_SRC

