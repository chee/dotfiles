#+TITLE: ~/dotfiles/emacs.org

* emacs.org
** What is this?
This is my emacs configuration in org-mode using org-babel. It's loaded using =(org-babel-load-file "~/dotfiles/emacs.org")= from my =init.el=. It contains a lot of things inspired (stolen) from places around the on web such as [[http://pages.sachachua.com/.emacs.d/Sacha.html][this one]]. 
** How to Add/Modify 
To add a code block, type =<s= and press =tab=, this adds a code block. Type =emacs-lisp= after =#BEGIN_SRC= to ensure the correct language.
To modify a code block, press =C-c '= to open an emacs-lisp buffer and hack away. Use =eval-buffer= to test the changes, and press =C-c '= again to add the changes to the org file.
** Some good keys to remember
| Key   | Action                                                     |
|-------+------------------------------------------------------------|
| F8    | Open/close neo-tree.                                       |
| C-c ' | Edit code within org-mode code blocks in their native mode |
| C-x u | Open undo-tree                                             |

* TODO Things to do
An on-going list of things I want to change

- [X] fix evil escape keys
  - using the =evil-collection= package
- [ ] make org prettier?
  + [ ] bullets?
- yasnippet: [0/2]
  + [ ] learn to use
  + [ ] configure
- [ ] Configure C#
  + use the C# lsp??
- [ ] fix =eslint= for lsp if possible
  + eslint works fine without the =lsp-javascript-typescript=
* Emacs
Things that modify how Emacs works and/or add some functionality to Emacs.
** Package Setup
Setup the package repositories and startup use-package.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  ;;(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  ;(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
  ;(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  ;; (add-to-list 'package-archives
  ;;              '("elpy" . "https://jorgenschaefer.github.io/packages/"))
  (package-initialize)

  (require 'use-package)
#+END_SRC

<s
=paradox= gives nicer package management than the default.

I mostly use it for =paradox-list-packages= and =paradox-upgrade-packages=
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t)
#+END_SRC
** System Specific
*** OSX
Paths need to be explicitly defined for some reason in OSX.
#+BEGIN_SRC emacs-lisp
  ;; (when (eq system-type 'darwin)
  ;;   (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
  ;;   (setq exec-path (append exec-path '("/usr/local/bin"))))

  (when (eq system-type 'darwin)
    (use-package exec-path-from-shell
      :ensure t)
    (exec-path-from-shell-initialize))
#+END_SRC
** Saner Defaults
Modify some of the default settings.

Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Don't create any extra files.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil ; stop creating backup~ files
        auto-save-default nil ; stop creating #autosave# files
        create-lockfiles nil) ; stop creating .# files
#+END_SRC

Update buffers automatically when underlying files are changed externally.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

Display the scratch buffer when starting up, use =org-mode= for the scratch buffer, and remove the default message.
#+BEGIN_SRC emacs-lisp
  (setq  inhibit-startup-screen t
         initial-major-mode 'org-mode
         initial-scratch-message nil)
#+END_SRC

Better mouse scrolling - the default scrolling is too quick.
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 10
        scroll-step 1
        next-line-add-newlines nil
        scroll-conservatively 10000
        scroll-preserve-screen-position 1
        mouse-wheel-follow-mouse 't
        mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC

A package that provides some good defaults, e.g. using the X clipboard for yanking
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC
** Custom Functions
*** what-minor-mode
list minor modes
- =my-active-minor-modes= is from: https://stackoverflow.com/questions/1511737/how-do-you-list-the-active-minor-modes-in-emacs
- =my/active-minor-modes= is =doom/what-minor-mode= from https://github.com/hlissner/doom-emacs
  + it uses =my-active-minor-modes= for the list of minor modes to display
#+BEGIN_SRC emacs-lisp
  (defun my-active-minor-modes ()
    "Get a list of active minor-mode symbols."
    (delq nil
          (mapcar
           (lambda (x)
             (let ((car-x (car x)))
               (when (and (symbolp car-x) (symbol-value car-x))
                 x)))
           minor-mode-alist)))

  (defun my/what-minor-mode (mode)
    "Get information on an active minor mode. Use `describe-minor-mode' for a
  selection of all minor-modes, active or not."
    (interactive
     (list (completing-read "Minor mode: "
                            (my-active-minor-modes))))
    (describe-minor-mode-from-symbol
     (cl-typecase mode
       (string (intern mode))
       (symbol mode)
       (t (error "Expected a symbol/string, got a %s" (type-of mode))))))
#+END_SRC
** Custom Keys
To set up custom keys, I use a combination of:
- =general= - define leader keys, e.g. press <SPACE> and a key to perform an action (if in evil's normal or visual modes)
- =which-key= - shows a list of all available keybindings, it works nicely with =general=, as it will show all the keybindings available after pressing <SPACE>
- =hydra= - create a "mode" (similar to how i3 does resize mode) for repeated actions
- =keyfreq= - use =keyfreq-show= to get a list of most use commands and then make keybindings/hydras out of them
*** general
Generic bindings (for all modes) appear after pressing <SPACE>

Mode specific bindings appear after pressing <SPACE m>

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-create-definer my-leader-def
      ;; :prefix my-leader
      :prefix "SPC")
    (general-create-definer my-local-leader-def
      ;; :prefix my-local-leader
      :prefix "SPC m")
    (my-leader-def
      :keymaps 'normal
      "c" 'comment-dwim
      "RET" 'make-frame-command
      "l" 'my/what-minor-mode
      ;; counsel
      "f" 'counsel-find-file
      "x" 'counsel-M-x
      "pf" 'counsel-projectile-find-file
      "pd" 'counsel-projectile-find-dir
      "pb" 'counsel-projectile-switch-to-buffer
      "pp" 'counsel-projectile-switch-project
      "pg" 'counsel-projectile-rg ;;ripgrep
      ;; buffers and windows
      "bb" 'switch-to-buffer
      "bk" 'kill-buffer
      "wo" 'split-window-horizontally
      "wu" 'split-window-vertically
      "wd" 'delete-window
      "wh" 'windmove-left
      "wj" 'windmove-down
      "wk" 'windmove-up
      "wl" 'windmove-right
      ;; workspaces
      "w." 'eyebrowse-switch-to-window-config
      "w," 'eyebrowse-rename-window-config
      "w1" 'eyebrowse-switch-to-window-config-1
      "w2" 'eyebrowse-switch-to-window-config-2
      "w3" 'eyebrowse-switch-to-window-config-3
      "w4" 'eyebrowse-switch-to-window-config-4
      "w4" 'eyebrowse-switch-to-window-config-4
      "w5" 'eyebrowse-switch-to-window-config-5
      "w6" 'eyebrowse-switch-to-window-config-6
      "w7" 'eyebrowse-switch-to-window-config-7
      "w8" 'eyebrowse-switch-to-window-config-8
      "w9" 'eyebrowse-switch-to-window-config-9
      "w0" 'eyebrowse-switch-to-window-config-0
      ;; magit
      "gs" 'magit-status
      "gc" 'magit-checkout
      "gC" 'magit-commit
      "gb" 'magit-blame
      "gS" 'magit-stage-file
      "gU" 'magit-unstage-file
      ;; multi-term
      "tt" 'multi-term
      "tn" 'multi-term-next
      "tp" 'multi-term-prev
      ;; bookmarks
      "rm" 'bookmark-set
      "rb" 'bookmark-jump
      "rl" 'bookmark-bmenu-list
      ;; agenda
      "a" 'org-agenda
      ;; dumb-jump
      "jgg" 'dumb-jump-go
      "jgc" 'dumb-jump-go-current-window
      "jgo" 'dumb-jump-go-other-window
      "jgp" 'dumb-jump-go-prefer-external
      "jgP" 'dumb-jump-go-prefer-external-other-window
      "jgp" 'dumb-jump-go-prompt
      "jb" 'dumb-jump-back
      "jq" 'dumb-jump-quick-look)

    (my-leader-def
      :keymaps 'visual
      "c" 'comment-dwim)

    (my-local-leader-def
      :states '(normal visual)
      :keyamps 'org-mode-map
      "t" 'org-babel-tangle)

    (my-local-leader-def
      :states '(normal visual)
      :keymaps 'emacs-lisp-mode-map
      "eb" 'eval-buffer
      "el" 'eval-last-sexp
      "ed" 'eval-defun
      "er" 'eval-region)

    (my-local-leader-def
      :states '(normal visual)
      :keymaps 'lisp-interaction-mode-map
      "eb" 'eval-buffer
      "el" 'eval-last-sexp
      "ed" 'eval-defun
      "er" 'eval-region)

    (my-local-leader-def
      :states '(normal visual)
      :keymaps 'lisp-mode-map
      "er" 'eval-region
      "ed" 'eval-defun)

    (my-local-leader-def
      :states '(visual normal)
      :keymaps 'scheme-mode-map
      "er" 'geiser-eval-region
      "eR" 'geiser-eval-region-and-go
      "eb" 'geiser-eval-buffer
      "eB" 'geiser-eval-buffer-and-go
      "ed" 'geiser-eval-definition
      "eD" 'geiser-eval-definition-and-go
      "el" 'geiser-eval-eval-sexp))
#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode)
    (which-key-setup-minibuffer)
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 0)
    (which-key-add-key-based-replacements "SPC w" "windows")
    (which-key-add-key-based-replacements "SPC b" "buffers")
    (which-key-add-key-based-replacements "SPC p" "projects")
    (which-key-add-key-based-replacements "SPC b" "buffers")
    (which-key-add-key-based-replacements "SPC r" "bookmarks")
    (which-key-add-key-based-replacements "SPC t" "terminal")
    (which-key-add-key-based-replacements "SPC g" "magit")
    (which-key-add-key-based-replacements "SPC j" "dumb-jump")
    (which-key-add-key-based-replacements "SPC jg" "go")
    (which-key-add-major-mode-key-based-replacements 'scheme-mode "SPC m e" "eval")
    (which-key-add-major-mode-key-based-replacements 'lisp-interaction-mode "SPC m e" "eval")
    (which-key-add-major-mode-key-based-replacements 'emacs-lispmode "SPC m e" "eval"))
#+END_SRC
*** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :config
    (defhydra hydra-zoom (global-map "<f5>")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out")
      ("r" (text-scale-set 0) "reset")
      ("0" (text-scale-set 0) :bind nil :exit t)))
#+END_SRC
*** keyfreq
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :config
    (keyfreq-autosave-mode 1))
#+END_SRC
** Vim Emulation
Evil mode is vim in emacs!
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil) ;; evil-collection assumes this
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC

Use evil bindings in various modes.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

surround.vim emulation.
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

Show tildes in the fringe on empty lines.
#+BEGIN_SRC emacs-lisp
  (use-package vi-tilde-fringe
    :ensure t
    :config
    (global-vi-tilde-fringe-mode 1))
#+END_SRC

Use the normal emacs state instead of evil's insert state. This allows you to use emacs keybindings while in insert mode.

from https://stackoverflow.com/questions/25542097/emacs-evil-mode-how-to-change-insert-state-to-emacs-state-automatically
#+BEGIN_SRC emacs-lisp
  (setq evil-insert-state-map (make-sparse-keymap))
  (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
#+END_SRC

display a visual hint when editing with evil
#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode)
    (setq evil-goggles-duration 0.150) ;; default is 0.200

    ;; optionally use diff-mode's faces; as a result, deleted text
    ;; will be highlighed with `diff-removed` face which is typically
    ;; some red color (as defined by the color theme)
    ;; other faces such as `diff-added` will be used for other actions
    ;;(evil-goggles-use-diff-faces)
    )
#+END_SRC
** Window and Buffer Management
*** eyebrowse
Eyebrowse provides a way to manage workspaces like tiling window managers.
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config
    (eyebrowse-mode t))
#+END_SRC
*** windmove
Windmove provides a way to move around emacs windows.

Default keybindings are: S-arrowkey (e.g. S-Left) to move around
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC
** Look and Feel
*** Theme
Theme I'm currently using
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    :config
    (load-theme 'doom-one t)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
  #+END_SRC

Some dark themes I Like
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'base16-tomorrow-night)
  ;;(load-theme 'kaolin-dark)
  ;;(load-theme 'doom-one)
  ;;(load-theme 'doom-tomorrow-night)
  ;;(load-theme 'doom-city-lights)
  ;;(load-theme 'kaolin-ocean)
  ;; (load-theme 'base16-spacemacs)
  ;;(load-theme 'gruvbox-dark-hard)
  ;;(load-theme 'sourcerer)
  ;;(load-theme 'spacemacs-dark)
  ;;(load-theme 'base16-tomorrow-dark)
  ;;(load-theme 'base16-twilight-dark)
  ;;(load-theme 'base16-default-dark)
  ;;(load-theme 'solarized-dark)
  ;;(setq solarized-distinct-fringe-background t)
  ;;(load-theme 'base16-ocean-dark)
  ;;(load-theme 'material)
  ;;(load-theme 'spacegray)
  ;;(load-theme 'dracula)
  ;;(load-theme 'reykjavik)
  ;;(set-cursor-color "gainsboro")
#+END_SRC

Some light themes I like
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'spacemacs-light)
  ;;(load-theme 'light-soap)
  ;;(load-theme 'solarized-light)
#+END_SRC
*** Font
Font I'm currently using
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka-12"))
  ;; (add-to-list 'default-frame-alist '(font . "Lemon-12"))
  ;; (add-to-list 'default-frame-alist '(font . "Uushi-11"))
#+END_SRC

Other fonts I like
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'default-frame-alist '(font . "Cherry-13"))
  ;; (add-to-list 'default-frame-alist '(font . "Scientifica-14" ))
  ;; (add-to-list 'default-frame-alist '(font . "Curie-14" ))
  ;;(add-to-list 'default-frame-alist '(font . "Fira Code-12" ))
  ;;(add-to-list 'default-frame-alist '(font . "Hack-12" ))
  ;;(add-to-list 'default-frame-alist '(font . "Input Mono Narrow-11" ))
  ;;(add-to-list 'default-frame-alist '(font . "Hermit-10" ))
  ;;(add-to-list 'default-frame-alist '(font . "Monaco-10" ))
  ;;(add-to-list 'default-frame-alist '(font . "Fantasque Sans Mono-11" ))
  ;;(add-to-list 'default-frame-alist '(font . "GohuFont-14" ))
  ;;(add-to-list 'default-frame-alist '(font . "envypn-11" ))
#+END_SRC
*** Other stuff
Hide the gui and use a non-blinking cursor for a more zen-like experience.
Use C-mouse3 to open the menu-bar as a popup menu
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -99)
  (tool-bar-mode -1) ;; hide the toolbar
  (scroll-bar-mode -1) ;; hide the scrollbar 
  (blink-cursor-mode 0) ;; dont blink the cursor
  (set-fringe-mode '(10 . 0)) ;;remove the extra border around frames
  (global-hl-line-mode 1) ;; highlight the current line
#+END_SRC

Add line numbers whenever the major mode is a programming language
#+BEGIN_SRC emacs-lisp 
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

Add a space between the line numbers and the text
From https://www.emacswiki.org/emacs/LineNumbers
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'linum-before-numbering-hook
  ;;           (lambda ()
  ;;             (setq-local linum-format-fmt
  ;;                         (let ((w (length (number-to-string
  ;;                                           (count-lines (point-min) (point-max))))))
  ;;                           (concat "%" (number-to-string w) "d")))))

  ;; (defun linum-format-func (line)
  ;;   (concat
  ;;    (propertize (format linum-format-fmt line) 'face 'linum)
  ;;    (propertize " " 'face 'mode-line)))

  ;; (setq linum-format 'linum-format-func)
#+END_SRC
*** Modeline
**** doom modeline
*NOTE* You need to run =M-x all-the-icons-install-fonts= to get the fancy fonts in the modeline
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
        :ensure t
        :defer t
        :hook (after-init . my-doom-modeline-hook)
        :config
        (defun my-doom-modeline-hook ()
          (column-number-mode)
          (doom-modeline-init)))
#+END_SRC
**** spaceline
Add an animated nyan-cat to indicate the buffer position, because why not?
#+BEGIN_SRC emacs-lisp
  ;; (use-package nyan-mode
  ;;   :ensure t
  ;;   :init
  ;;   (setq nyan-wavy-trail t)
  ;;   :config
  ;;   (nyan-mode 1)
  ;;   (nyan-start-animation))
#+END_SRC

spacemacs modeline settings
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
  ;;   :ensure t)

  ;; (use-package spaceline-config
  ;;   :ensure spaceline
  ;;   :config
  ;;   ;; (setq powerline-default-separator 'wave)
  ;;   ;; (setq powerline-default-separator 'alternate)
  ;;   ;; (setq powerline-default-separator 'arrow)
  ;;   ;; (setq powerline-default-separator 'arrow-fade)
  ;;   ;; (setq powerline-default-separator 'box)
  ;;   ;; (setq powerline-default-separator 'brace)
  ;;   ;; (setq powerline-default-separator 'butt)
  ;;   ;; (setq powerline-default-separator 'chamfer)
  ;;   ;; (setq powerline-default-separator 'contour)
  ;;   ;; (setq powerline-default-separator 'curve)
  ;;   ;; (setq powerline-default-separator 'rounded)
  ;;   ;; (setq powerline-default-separator 'roundstub)
  ;;   ;; (setq powerline-default-separator 'wave)
  ;;   ;; (setq powerline-default-separator 'zigzag)
  ;;   ;; (setq powerline-default-separator 'utf-8)

  ;;   (setq powerline-default-separator 'bar)
  ;;   (spaceline-spacemacs-theme)
  ;;   (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  ;;   (setq spaceline-workspace-numbers-unicode t)
  ;;   (setq spaceline-window-numbers-unicode t))
#+END_SRC

**** My custom modeline
#+BEGIN_SRC emacs-lisp
  ;; (setq-default mode-line-format
  ;;               (list
  ;;      "-- " 
  ;;      ;; the buffer name; the file name as a tool tip
  ;;      '(:eval (propertize "%b " 'face 'font-lock-keyword-face
  ;;                         'help-echo (buffer-file-name)))

  ;;     ;; the current major mode for the buffer.
  ;;      "["

  ;;      '(:eval (propertize "%m" 'face 'font-lock-string-face
  ;;                          'help-echo buffer-file-coding-system))
  ;;      " -"
  ;;      minor-mode-alist ;; the minor modes for the current buffer
  ;;      "] "

  ;;      "[" ;; insert vs overwrite mode, input-method in a tooltip
  ;;      '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
  ;;             'face 'font-lock-preprocessor-face
  ;;             'help-echo (concat "Buffer is in "
  ;;                             (if overwrite-mode "overwrite" "insert") " mode")))

  ;;      ;; was this buffer modified since the last save? 
  ;;      '(:eval (when (buffer-modified-p)
  ;;             (concat ","  (propertize "Mod"
  ;;             'face 'font-lock-warning-face
  ;;                               'help-echo "Buffer has been modified"))))

  ;;      ;; is this buffer read-only?
  ;;      '(:eval (when buffer-read-only
  ;;                (concat ","  (propertize "RO"
  ;;                               'face 'font-lock-type-face
  ;;                               'help-echo "Buffer is read-only"))))  
  ;;      "] "

  ;;      ;; line and column
  ;;      "(" ;; '%02' to set to 2 chars at least; prevents flickering
  ;;        (propertize "%02l" 'face 'font-lock-type-face) ","
  ;;        (propertize "%02c" 'face 'font-lock-type-face) 
  ;;      ") "

  ;;      ;; '(:eval (list (nyan-create)))

  ;;      ;; relative position, size of file
  ;;      "["
  ;;      (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
  ;;      ;;"/"
  ;;      ;;(propertize "%I" 'face 'font-lock-constant-face) ;; size
  ;;      "] "

  ;;      " %-" ;; fill with '-'
  ;;      ))
#+END_SRC

****** TODO make the color of the bar change when switching between evil modes
#+BEGIN_SRC emacs-lisp
  ;; change mode-line color by evil state
  ;;(lexical-let ((default-color (cons (face-background 'mode-line)
  ;;                                  (face-foreground 'mode-line))))
  ;;    (add-hook 'post-command-hook
  ;;    (lambda ()
  ;;      (let ((color (cond ((minibufferp) default-color)
  ;;                      ((evil-insert-state-p) '("#eee" . "#ffffff"))
  ;;                      ((evil-emacs-state-p)  '("#444488" . "#ffffff"))
  ;;                      ((buffer-modified-p)   '("#006fa0" . "#ffffff"))
  ;;                      (t default-color))))
  ;;      (set-face-background 'mode-line (car color))
  ;;      (set-face-foreground 'mode-line (cdr color))))))
#+END_SRC
*** solaire
make certain buffers lighter/darker, e.g. treemacs
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :ensure t
    :hook ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    :config
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
    (solaire-mode-swap-bg))
#+END_SRC
*** rainbow delimiters
Add rainbow delimiters in all programming language modes
#+BEGIN_SRC emacs-lisp 
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** org mode
Set up everything for =org-mode=

The =:general= block maps :x and :q to confirm and :q to abort when editing =SRC= blocks.

Open the agenda with =SPC a=.

Change the status of the todo state by pressing =C-c C-c t <KEY>=
- the =<KEY>= is the the letter in the parens after the state (e.g. =TODO(t)=)

Stuff for making org-mode prettier:
- =org-src-fontify-natively= turns on syntax highlighting for =#+SRC= blocks
- =org-bullets= provides prettier bullets for the header
- =indent-mode= indents each header and text block
- =turn-on-visual-line-mode= is for visual word wrap

Existing templates for reference:
- https://orgmode.org/manual/Easy-templates.html

The todo states are largely based taken from from http://doc.norang.ca/org-mode.html

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-bullets
    :general
    (org-src-mode-map
              [remap evil-save-and-close]          'org-edit-src-exit
              [remap evil-save-modified-and-close] 'org-edit-src-exit
              [remap evil-quit]                    'org-edit-src-abort)
    :hook ((org-mode . my-org-mode-hook))
    :config
    (defun my-org-mode-hook ()
      (org-indent-mode)
      (turn-on-visual-line-mode)
      (org-bullets-mode 1))
    (setq org-agenda-files (list "~/org/agenda/"))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "CURRENT(c)" "|" "DONE(d)")
            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "#ff5555" :weight bold)
                  ("NEXT" :foreground "#61bfff" :weight bold)
                  ("CURRENT" :foreground "#8be9fd" :weight bold)
                  ("DONE" :foreground "#50fa7b" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("HOLD" :foreground "#ff79c6" :weight bold)
                  ("CANCELLED" :foreground "forest green" :weight bold))))
    (setq org-use-fast-todo-selection t)
    (setq org-log-done 'time)
    (setq org-src-fontify-natively t)
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
     '(org-level-2 ((t (:inherit outline-1 :height 1.2))))
     '(org-level-3 ((t (:inherit outline-1 :height 1.1))))
     '(org-level-4 ((t (:inherit outline-1 :height 1.0))))
     '(org-level-5 ((t (:inherit outline-1 :height 1.0)))))
    ;; add structure templates, e.g. type <el <TAB> for emacs-lisp
    (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC"))
    (add-to-list 'org-structure-template-alist '("sh" "#+BEGIN_SRC sh\n\n#+END_SRC")))
#+END_SRC
**** old stuff
old snippets of things
#+BEGIN_SRC emacs-lisp
  ;; (font-lock-add-keywords 'org-mode
  ;;                         '(("^ +\\([-*]\\) "
  ;;                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO" "CURRENT" "|" "DONE")))

  ;; (font-lock-add-keywords 'org-mode
  ;;                         '(("^ +\\([-*]\\) "
  ;;                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

                                          ;(setq org-hide-emphasis-markers t)
#+END_SRC

*** htmlize
Provides syntax highlighting for =#+SRC= blocks in html exports.

Needed by =nikola=

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
  ;(setq org-src-fontify-natively t)
#+END_SRC
** yasnippet
Use snippets in specific modes
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
   :ensure t
   :init
   (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"))
   :config
   (yas-global-mode 1))
#+END_SRC

Install the official snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode))
#+END_SRC

** treemacs
Replacing neotree with treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :bind ([f8] . treemacs))

  (use-package treemacs-evil
    :ensure t)

  (use-package treemacs-projectile
    :ensure t)
#+END_SRC

** undo-tree
press <C-x u> to use and <q> to quit.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :defer t
    :ensure t
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t))
#+END_SRC

** magit
use git in emacs!
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :general
    ("C-x g" 'magit-status))
#+END_SRC

Get evil-mode to play nicely
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :ensure t)
#+END_SRC
** projectile
Projectile allows some nice things for projects, such as searching for files, managing buffers, etc.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
#+END_SRC

** ivy/counsel/swiper
Some nice tools that use the minibuffer.

Replace emacs commands with counsel ones.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("<f1> f" . counsel-describe-function)
    ("<f1> v" . counsel-describe-variable)
    ("<f1> l" . counsel-find-library)
    ("<f2> i" . counsel-info-lookup-symbol)
    ("<f2> u" . counsel-unicode-char)
    ("C-c g" . counsel-git)
    ("C-c j" . counsel-git-grep)
    ("C-c k" . counsel-rg)
    ("C-x l" . counsel-locate)
    ("C-S-o" . counsel-rhythmbox)
    ("C-S-r" . counsel-expression-history)
    :config
    ;; use ripgrep for counsel-git-grep
    (setq counsel-git-cmd "rg --files")
    (setq counsel-rg-base-command
          "rg -i -M 120 --no-heading --line-number --color never %s ."))
#+END_SRC

Replace emacs search and evil search with swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper)
    :config
    (define-key evil-normal-state-map (kbd "/") 'swiper))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-height 20)
    :bind
    ("<f6>" . ivy-resume))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC

** editorconfig
Use editorconfig for projects that have them

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :delight
    :ensure t
    :config
    (editorconfig-mode 1))
#+END_SRC

** restart
Yo dawg, use =restart-emacs= to restart emacs within emacs.
Using this because I'm constantly making changes to this file and sometimes I need to restart things for changes to take affect.
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :ensure t)
#+END_SRC

** restclient
Test RESTful APIs in emacs!
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)

  (use-package company-restclient
    :ensure t)

  (use-package ob-restclient
    :ensure t)
#+END_SRC

** multi-term
run multiple terminals at once (as opposed to =M-x term=, which can only run one terminal at a time)
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t)
#+END_SRC

* Languages
Configuration for programming languages
** language server protocol
Setup for Microsoft's (GASP!) Language Server Protocol.

#+BEGIN_QUOTE
The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references etc. 
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :defer t
    :ensure t
    :config
    ;; make sure we have lsp-imenu everywhere we have LSP
    (require 'lsp-imenu)
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu))

  ;; lsp extras
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-ignore-duplicate t
          lsp-ui-flycheck-enable t))

  (use-package company-lsp
    :ensure t
    :after (lsp-mode company-mode)
    :config
    (push 'company-lsp company-backends))
#+END_SRC
** smartparens
autocomplete for brackets
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (add-hook 'python-mode-hook (function (lambda ()
                                            (smartparens-mode t)))))
#+END_SRC
** dumb-jump
Get some nice go-to-definition functionality
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window)
           ("<f9>" . dumb-jump-hydra/body))
    :config
    (setq dumb-jump-selector 'ivy)
    (setq dumb-jump-force-searcher 'rg)
    (defhydra dumb-jump-hydra (:color blue :columns 3)
      "Dumb Jump"
      ("j" dumb-jump-go "Go")
      ("o" dumb-jump-go-other-window "Other window")
      ("e" dumb-jump-go-prefer-external "Go external")
      ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
      ("i" dumb-jump-go-prompt "Prompt")
      ("l" dumb-jump-quick-look "Quick look")
      ("b" dumb-jump-back "Back")))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :ensure t
    :config
    (global-flycheck-mode))
#+END_SRC

** Python
from https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/

In order for this to work, you need to install https://github.com/palantir/python-language-server

#+BEGIN_SRC emacs-lisp
  (use-package lsp-python
    :ensure t
    :config
    ;; redefine lsp-python-enable to use projectile-project-root
    (lsp-define-stdio-client lsp-python "python"
                             #'projectile-project-root
                             '("pyls"))
    (add-hook 'python-mode-hook #'lsp-python-enable)

    ;; NB: only required if you prefer flake8 instead of the default
    ;; send pyls config via lsp-after-initialize-hook -- harmless for
    ;; other servers due to pyls key, but would prefer only sending this
    ;; when pyls gets initialised (:initialize function in
    ;; lsp-define-stdio-client is invoked too early (before server
    ;; start)) -- cpbotha
    (defun lsp-set-cfg ()
      (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
        ;; TODO: check lsp--cur-workspace here to decide per server / project
        (lsp--set-configuration lsp-cfg)))

    (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg))
#+END_SRC

Use =pipenv= to handle virtual environments
#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :hook ((python-mode . pipenv-mode)
           (hy-mode . pipenv-mode))
    :init
    (setq pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))
#+END_SRC

**** Elpy - OLD
trying out LSP instead of elpy, keeping this in case I want to go back.

[[https://github.com/jorgenschaefer/elpy][elpy]] is an "Emacs Lisp Python Environment"
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :ensure t
  ;;   :config
  ;;   (elpy-enable))
#+END_SRC

*** Hy
Let's get hy. A lisp for python
#+BEGIN_SRC emacs-lisp
  (use-package hy-mode
    :ensure t
    ;:config
    ;(add-to-list `auto-mode-alist '("\\.hy?\\'" . hy-mode))
    )
#+END_SRC
** C#
#+BEGIN_SRC emacs-lisp
  ;; (use-package csharp-mode
  ;;   :ensure t
  ;;   :init
  ;;   (add-to-list 'company-backends 'company-omnisharp))

  ;; from omnisharp-emacs README
  ;; (eval-after-load
  ;;   'company
  ;;   '(add-to-list 'company-backends #'company-omnisharp))

  ;; (defun my-csharp-mode-setup ()
  ;;   (omnisharp-mode)
  ;;   (company-mode)
  ;;   (flycheck-mode)

  ;;   (setq indent-tabs-mode nil)
  ;;   (setq c-syntactic-indentation t)
  ;;   (c-set-style "ellemtel")
  ;;   (setq c-basic-offset 4)
  ;;   (setq truncate-lines t)
  ;;   (setq tab-width 4)
  ;;   (setq evil-shift-width 4)

    ;csharp-mode README.md recommends this too
    ;(electric-pair-mode 1)       ;; Emacs 24
    ;(electric-pair-local-mode 1) ;; Emacs 25

  ;;   (local-set-key (kbd "C-c r r") 'omnisharp-run-code-action-refactoring)
  ;;   (local-set-key (kbd "C-c C-c") 'recompile))

  ;; (add-hook 'csharp-mode-hook 'my-csharp-mode-setup t)
#+END_SRC
Omnisharp should load after a csharp file is loaded
#+BEGIN_SRC emacs-lisp
  ;; (use-package omnisharp
  ;;   :ensure t
  ;;   :init
  ;;   (setq omnisharp-server-executable-path "~/omnisharp-server/OmniSharp/bin/Debug/OmniSharp.exe")
  ;;   :config
  ;;  (add-hook 'csharp-mode-hook 'omnisharp-mode))
#+END_SRC
omnisharp evil-mode keys...
taken from: https://github.com/OmniSharp/omnisharp-emacs/blob/master/example-config-for-evil-mode.el
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'insert omnisharp-mode-map (kbd "M-.") 'omnisharp-auto-complete)
  (evil-define-key 'normal omnisharp-mode-map (kbd "<f12>") 'omnisharp-go-to-definition)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g u") 'omnisharp-find-usages)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g I") 'omnisharp-find-implementations) ; g i is taken
  (evil-define-key 'normal omnisharp-mode-map (kbd "g o") 'omnisharp-go-to-definition)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g r") 'omnisharp-run-code-action-refactoring)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g f") 'omnisharp-fix-code-issue-at-point)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g F") 'omnisharp-fix-usings)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g R") 'omnisharp-rename)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", i") 'omnisharp-current-type-information)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", I") 'omnisharp-current-type-documentation)
  (evil-define-key 'insert omnisharp-mode-map (kbd ".") 'omnisharp-add-dot-and-auto-complete)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n t") 'omnisharp-navigate-to-current-file-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n s") 'omnisharp-navigate-to-solution-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n f") 'omnisharp-navigate-to-solution-file-then-file-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n F") 'omnisharp-navigate-to-solution-file)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n r") 'omnisharp-navigate-to-region)
  (evil-define-key 'normal omnisharp-mode-map (kbd "<f12>") 'omnisharp-show-last-auto-complete-result)
  (evil-define-key 'insert omnisharp-mode-map (kbd "<f12>") 'omnisharp-show-last-auto-complete-result)
  (evil-define-key 'normal omnisharp-mode-map (kbd ",.") 'omnisharp-show-overloads-at-point)
  (evil-define-key 'normal omnisharp-mode-map (kbd ",rl") 'recompile)

  (evil-define-key 'normal omnisharp-mode-map (kbd ",rt")
    (lambda() (interactive) (omnisharp-unit-test "single")))

  (evil-define-key 'normal omnisharp-mode-map
    (kbd ",rf")
    (lambda() (interactive) (omnisharp-unit-test "fixture")))

  (evil-define-key 'normal omnisharp-mode-map
    (kbd ",ra")
    (lambda() (interactive) (omnisharp-unit-test "all")))

  ;; Speed up auto-complete on mono drastically. This comes with the
  ;; downside that documentation is impossible to fetch.
  (setq omnisharp-auto-complete-want-documentation nil)
#+END_SRC

** C
**** TODO set this up using use-package
Example taken from [[https://www.emacswiki.org/emacs/IndentingC][EmacsWIki: Indenting C]]
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)
#+END_SRC
** Lisp
- =show-paren-mode= highlights matching parentheses 
- =paredit= inserts matching parentheses, among other things..
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)

  (use-package paredit
    :ensure t
    :init
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'hy-mode-hook #'enable-paredit-mode)
    (add-hook 'inferior-hy-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode)
    (add-hook 'geiser-repl-mode-hook #'enable-paredit-mode))

  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

=geiser= provides a nice repl for *scheme* and other things
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :config
    (setq geiser-active-implementations '(guile mit racket)))
#+END_SRC

Using this to mess with stumpwm right now.
#+BEGIN_SRC emacs-lisp
  ;; (use-package slime
  ;;   :ensure t
  ;;   :init
  ;;   (setq inferior-list-program "sbcl"))
#+END_SRC

** Haskell
For xmonad and beyond
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :init
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indent))
#+END_SRC
** Javascript
*** Vanilla
Setup for JavaScript using =js2-mode=.

- autocomplete with =tern=
- using =tide= for:
  + info in the minibuffer about the highlighted item
  + jump to defifinition / implementation
  + linting
- prettify the file on save using =prettier-js= along with =prettier=
- add =eslint= to =flycheck= for linting

Largely stolen from https://github.com/CSRaghunandan/.emacs.d/blob/master/setup-files/setup-js.el
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode (("\\.js$" . js2-mode))
    :hook ((js2-mode . my-js-hook))
    :ensure-system-package ((prettier . "npm i -g prettier")
                            (eslint . "npm i -g eslint")
                            (eslint_d . "npm i -g eslint_d"))
    :init
     ;; set the indent level to 2
    (setq js2-basic-offset 2)
    (setq js-chain-indent t)
    (setq js-indent-level 2)

    ;; use eslint_d instead of eslint for faster linting
    (setq flycheck-javascript-eslint-executable "eslint_d")

    ;; highlight most ECMA built-ins
    (setq js2-highlight-level 3)

    ;; turn off all warnings in js2-mode
    (setq js2-mode-show-parse-errors t)
    (setq js2-mode-show-strict-warnings nil)
    (setq js2-strict-missing-semi-warning nil)

    :config
    (defun my-tide-setup-hook ()
      "Configure tide"
      (tide-setup)
      ;; highlight identifiers
      (tide-hl-identifier-mode +1)
      (eldoc-mode t)
      (flycheck-mode t)
      ;; configure javascript-tide checker to run after your default javascript checker
      (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
      (prettier-js-mode))

    ;; TODO make this work with eslint
    ;; (defun my-lsp-js-setup-hook ()
    ;;   "Fix company completions for the LSP and then enable it"
    ;;   (defun my-company-transformer (candidates)
    ;;     (let ((completion-ignore-case t))
    ;;       (all-completions (company-grab-symbol) candidates)))
    ;;   (make-local-variable 'company-transformers)
    ;;   (push 'my-company-transformer company-transformers)
    ;;   (lsp-javascript-typescript-enable))

    (defun my-js-hook ()
      "Set up JavaScript"
      ;; set evil indent, ">>", to 2
      (setq evil-shift-width js-indent-level)
      (my-tide-setup-hook)
      ;; (my-lsp-js-setup-hook)
      (tern-mode t)
      (smartparens-mode t)))
#+END_SRC

=tern= and =tern-company= are for auto completion
#+BEGIN_SRC emacs-lisp
  (use-package tern
    :ensure t
    :ensure-system-package ((tern . "npm i -g tern"))
    :init
    (setq tern-command '("/home/kevin/.node_modules/bin/tern")))

  (use-package company-tern
    :ensure t
    :config
    (add-to-list 'company-backends 'company-tern))
#+END_SRC

Set up javascript with LSP
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-javascript-typescript
  ;;   :ensure t
  ;;   :ensure-system-package ((javascript-typescript-langserver . "npm i -g javascript-typescript-langserver")))
#+END_SRC

Set up =tide-mode=
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t
    :after (js2-mode company flycheck))
#+END_SRC

Set up =prettier-js-mode=
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js 
    :ensure t
    :hook ((js2-mode . prettier-js-mode)
           (rjsx-mode . prettier-js-mode)))
#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :init
    (add-to-list `auto-mode-alist '("\\.json\\'" . json-mode)))
#+END_SRC
*** TODO TypeScript
#+BEGIN_SRC emacs-lisp
  ;; (use-package tide
  ;;   :ensure t
  ;;   :config
  ;;   ;; aligns annotation to the right hand side
  ;;   (setq company-tooltip-align-annotations t)
  ;;   ;; formats the buffer before saving
  ;;   (add-hook 'before-save-hook 'tide-format-before-save)
  ;;   (add-hook 'typescript-mode-hook
  ;;             (lambda ()
  ;;               (interactive)
  ;;               (tide-setup)
  ;;               (flycheck-mode +1)
  ;;               (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  ;;               (eldoc-mode +1)
  ;;               (tide-hl-identifier-mode +1)))
  ;;   (add-hook 'tide-mode-hook
  ;;             (lambda ()
  ;;               (define-key tide-mode-map (kbd "<f12>") 'tide-jump-to-definition))))
#+END_SRC
*** React
=rjsx-mode= is for editing =.jsx= files

Dont need too much here because it uses =js2-mode= where most of the config is done
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t)
#+END_SRC
** Web Mode
Set up web mode for html and css files
#+BEGIN_SRC emacs-lisp
  (use-package web-mode 
    :ensure t
    :hook ((web-mode . my-web-mode-hook))
    :init
    ;; (setq web-mode-ac-sources-alist
    ;;       '(("css" . (ac-source-css-property))
    ;;         ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (add-hook 'web-mode-before-auto-complete-hooks
              '(lambda ()
                 (let ((web-mode-cur-language
                        (web-mode-language-at-pos))))))
    (add-to-list `auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list `auto-mode-alist '("\\.css\\'" . web-mode))
    ;;(add-to-list `auto-mode-alist '("\\.php\\'" . web-mode))
    ;;(add-to-list `auto-mode-alist '("\\.js\\'" . web-mode))
    (defun my-web-mode-hook ()
      ;; set the html indent to 2
      (setq web-mode-markup-indent-offset 2)
      (setq evil-shift-width 2)
      ;; highlight matching elements in html
      (setq web-mode-enable-current-element-highlight 1)))
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    :hook ((php-mode . my-php-hook))
    :mode "\\.php\\'"
    :config
    (defun my-php-hook ()
      ;; indent -> calls next line like symfony2
      (php-enable-symfony2-coding-style)
      (smartparens-mode t))
    ;; align -> on successive lines
    (setq php-lineup-cascaded-calls t)
    (custom-set-variables
     '(flycheck-phpcs-standard "WellspringCodingStandard")))
#+END_SRC

Documentation in the minibuffer and with =company=. This is needed by =company-php=.
#+BEGIN_SRC emacs-lisp
  (use-package php-eldoc
    :ensure t)
#+END_SRC

Setup code completion and documentation.
#+BEGIN_SRC emacs-lisp
  (use-package company-php
    :ensure t
    :hook ((php-mode . my-company-php-hook))
    :config
    (defun my-company-php-hook ()
      (ac-php-core-eldoc-setup)
      (make-local-variable 'company-backends)
      (add-to-list 'company-backends 'company-ac-php-backend)))
#+END_SRC

Use =PHP_CodeSniffer= to format files on save.
#+BEGIN_SRC emacs-lisp
  (use-package phpcbf
    :ensure t
    :hook ((php-mode . phpcbf-enable-on-save))
    :config
    (setq phpcbf-executable "/usr/local/bin/phpcbf")
    (setq phpcbf-standard "WellspringCodingStandard"))
#+END_SRC

Align double arrows (=>) in arrays.
#+BEGIN_SRC emacs-lisp
  (defun my-align-php-dbl-arrow ()
    "Align the => in arrays."
    (interactive)
    (align-regexp
     (region-beginning) (region-end)
     "\\(\\s-*\\) => " 1 0 nil))

  (global-set-key (kbd "C-c a") 'my-align-php-dbl-arrow)
#+END_SRC
